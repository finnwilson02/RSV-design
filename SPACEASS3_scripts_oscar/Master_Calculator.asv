% AERO2705 Assignment 3 Master Calculator | Author: Oscar Ansted
%
%
% This function summarises the service process that the RSV undergoes
% throughout its lifetime, and provides information to the user regarding
% delta-v, fuel requirements, elapsed time, and trajectory visualisation of
% the satellite. 
clear;
clc;
clf;

%% Global Parameters
mu = 3.986004418e+14; % standard gravitational parameter for Earth (m^3/s^2)
Re = 6378e+3; % radius of Earth (m)
deg = pi/180; % converts degrees to radians
longSyd = 152; % East longitude of Sydney (deg)
omega_geo = 7.292123516990375e-05; % angular velocity of geostationary orbit (m/s)

%% DEFINE how many SERVICES are to be made
serviceCount = 17;

%% DEFINE how long docking takes
dockTime = 6; % time to dock (hrs)

%% define: TARGET 
coeA = [1.296404445843445e+11,0,0,0,longSyd*deg,0]; % orbital elements of target spacecraft [h e Omega i omega theta]

% extract each element 
hA = coeA(1); % angular momentum (m^2/s)
eA = coeA(2); % eccentricity
OmegaA = coeA(3); % RA of asc node (rad)
iA = coeA(4); % inclination (rad)
omegaA = coeA(5); % arg of perigee (rad)
thetaA = coeA(6); % true anomaly (rad)

% calculate the additional elements of the TARGET
aA = hA^2/(mu*(1 - eA^2)); % semi-major axis (m)
r_aA = aA*(1 + eA); % radius of apogee (m)
r_pA = aA*(1 - eA); % radius of perigee (m)
TA = sqrt(aA^3*4*pi^2/mu); % period (s)
nA = 2*pi/TA; % mean motion (rad/s)

[RA_0, VA_0] = coe2stateVecs(coeA); % extract the state vectors of the target 

%% define: FLYBY 
% FLYBY 1: coplanar trajectory
drFB1_0 = [-50, 0, 0]; % initial position vector in LVLH (m)
dvFB1_0 = [0, -2*nA*drFB1_0(1), 0]; % initial velocity vector in LVLH (m/s) 

% FLYBY 2: positive inclined trajectory
drFB2_0 = drFB1_0; % initial position vector in LVLH (m)
dvFB2_0 = [0, -2*nA*drFB2_0(1), 2*nA*drFB2_0(1)]; % initial velocity vector in LVLH (m/s) 

% FLYBY 3: negative inclined trajectory
drFB3_0 = drFB1_0; % initial position vector in LVLH (m)
dvFB3_0 = [0, -2*nA*drFB2_0(1), -2*nA*drFB2_0(1)]; % initial velocity vector in LVLH (m/s) 

% extract COEs for each FLYBY orbit (a, e, h, i, theta, Omega, omega)

% FLYBY 1 
[rFB1_0, vFB1_0] = LVLH_to_gcef(coeA, drFB1_0', dvFB1_0');
coeFB1 = rv_to_coe(rFB1_0, vFB1_0);

% FLYBY 2 
[rFB2_0, vFB2_0] = LVLH_to_gcef(coeA, drFB2_0', dvFB2_0');
coeFB2 = rv_to_coe(rFB2_0, vFB2_0);

% FLYBY 3 
[rFB3_0, vFB3_0] = LVLH_to_gcef(coeA, drFB3_0', dvFB3_0');
coeFB3 = rv_to_coe(rFB3_0, vFB3_0);

% print the FLYBY orbits 
fprintf('MASTER CALCULATOR\n\n');

fprintf('FLYBY 1 orbit:\n');
fprintf('Semi-major axis = %f km\n', coeFB1(1)*10^-3);
fprintf('Eccentricity = %f \n', coeFB1(2));
fprintf('Specific angular momentum = %f km^2/s\n', coeFB1(3)*10^-6);
fprintf('Inclination = %f deg\n', coeFB1(4)/deg);
fprintf('True anomaly = %f deg\n', coeFB1(5)/deg);
fprintf('RA of ascending node = %f deg\n', coeFB1(6)/deg);
fprintf('Argument of perigee = %f deg\n', coeFB1(7)/deg);
fprintf('\nFLYBY 2 orbit:\n');
fprintf('Semi-major axis = %f km\n', coeFB2(1)*10^-3);
fprintf('Eccentricity = %f \n', coeFB2(2));
fprintf('Specific angular momentum = %f km^2/s\n', coeFB2(3)*10^-6);
fprintf('Inclination = %f deg\n', coeFB2(4)/deg);
fprintf('True anomaly = %f deg\n', coeFB2(5)/deg);
fprintf('RA of ascending node = %f deg\n', coeFB2(6)/deg);
fprintf('Argument of perigee = %f deg\n', coeFB2(7)/deg);
fprintf('\nFLYBY 3 orbit:\n');
fprintf('Semi-major axis = %f km\n', coeFB3(1)*10^-3);
fprintf('Eccentricity = %f \n', coeFB3(2));
fprintf('Specific angular momentum = %f km^2/s\n', coeFB3(3)*10^-6);
fprintf('Inclination = %f deg\n', coeFB3(4)/deg);
fprintf('True anomaly = %f deg\n', coeFB3(5)/deg);
fprintf('RA of ascending node = %f deg\n', coeFB3(6)/deg);
fprintf('Argument of perigee = %f deg\n', coeFB3(7)/deg);
%% part (i) -- TRAJECTORY VISUALISATION in LVLH FRAME
% Construct the timespan vector
t0 = 0; % initial time (s)
tf = 1*TA; % final time (s)
tspan = [t0, tf]; % timespan (s)

% Establish which figures the plots will be on [relMotion, velPlot]
nFigsFB1 = [1, 2];
nFigsFB2 = [1, 3];
nFigsFB3 = [1, 4];

% Establish which colours each plot is
colourFB1 = 'b';
colourFB2 = 'r';
colourFB3 = 'g';

% Plot both the rel motion and the rel velocity profile for each trajectory
[tFB1, fFB1] = relativeChaserMotionPlot(tspan, drFB1_0, dvFB1_0, RA_0, VA_0, nFigsFB1, colourFB1);
[tFB2, fFB2] = relativeChaserMotionPlot(tspan, drFB2_0, dvFB2_0, RA_0, VA_0, nFigsFB2, colourFB2);
[tFB3, fFB3] = relativeChaserMotionPlot(tspan, drFB3_0, dvFB3_0, RA_0, VA_0, nFigsFB3, colourFB3);

%% part (ii) -- TRAJECTORY VISUALISATION in GCEF FRAME **EXAGGERATED**
% Exaggerate the LVLH vectors
exg = 10^4; % exaggeration factor

plotExaggeratedGCEF(tspan, coeA, drFB1_0, dvFB1_0, RA_0, VA_0, exg, 5, '--b');
plotExaggeratedGCEF(tspan, coeA, drFB2_0, dvFB2_0, RA_0, VA_0, exg, 6, '--b');
plotExaggeratedGCEF(tspan, coeA, drFB3_0, dvFB3_0, RA_0, VA_0, exg, 7, '--b');

%% part (iii) -- SERVICE MANOEUVRES burn calculator
% Define the lag of the OAP behind the target
lambda = 0.5*deg; % out of phase factor (rad)

%% define: ORBIT 1, initial geostationary at OAP
coeB1 = coeA; 
coeB1(end) = coeB1(end) - lambda; % same, but out of phase by lambda (located at the OAP)

%% MANOEUVRE 1 -- PHASER of 180 deg

%% MANOEUVRE 2 -- TRANSFER, HOHMANN [ORBIT 1 --> FLYBY 1, via. ORBIT 2]
% As this transfer is coplanar, set the arg of perigee of FB1 to longSyd
coeFB1(end) = longSyd*deg; % set the argument of perigee to that of orbit 1, so the transfer is along common apse line

% Is the burn at the apogee?
apogeeBurn = 0; % no, the burn as at the perigee when theta = 0;

% Extract the semi-major axes and eccentricities of ORBIT 1
hB1 = coeB1(1); % angular momentum of ORBIT 1 (m^2/s)
eB1 = coeB1(2); % eccentricity of ORBIT 1 
aB1 = hB1^2/(mu*(1 - eB1^2)); % semi-major axis of ORBIT 1 (m^2/s)

% Extract the semi-major axes and eccentricities of FLYBY 1
aFB1 = coeFB1(1); % semi-major axis of FLYBY 1 (m^2/s)
eFB1 = coeFB1(2); % eccentricity of FLYBY 1 

% Extract the arguments of perigee
omega1 = coeB1(5);
omega3 = coeFB1(end);

[delta_v_M2, hohmann_B2] = coplanarHohmann(aB1, eB1, aFB1, eFB1, omega1, omega3, apogeeBurn);

% Compute apogee and perigee radii
r_aFB1 = aFB1*(1 + eFB1);
r_pFB1 = aFB1*(1 - eFB1);
hFB1 = coeFB1(3); % angular momentum (m^2/s)

%% define: ORBIT 2, Hohmann transfer ellipse 
hB2 = hohmann_B2(1); % hohmann transfer angular momentum (m^2/s)
eB2 = hohmann_B2(2); % hohmann transfer eccentricity

% Extract the period, and hence transit time, and use this information to
% extract the amount of phasing required for orbit 3 so that thetaA =
% thetaB and the fly by can be executed.
aB2 = hB2^2/(mu*(1 - eB2^2)); % semi-major axis (m)
TB2 = sqrt(aB2^3*4*pi^2/mu); % hohmann period (s)

%% MANOEUVRE 3 -- PHASER of lambda deg
% Firstly, calculate the time of flight of ORBIT 2
delta_t_M2 = TB2/2; % manoeuvre 2 elapsed time (s)

% From this, compute the current phase difference between the RSV and
% target
dthetaA = delta_t_M2*omega_geo; % change in true anomaly for the target;

% The target lies at lambda when the first burn is induced at theta = 0 for
% the RSV:
thetaA_initial = lambda; % initial true anomaly of target (rad)
thetaB_initial = 0; % initial true anomaly of RSV (rad)

% Calculate the changed true anomaly after the Hohmann transfer
thetaB_final = pi + thetaB_initial; % final true anomaly of RSV (rad)
thetaA_final = thetaA_initial + dthetaA; % final true anomaly of target (rad)

% How long will the phaser take in terms of its period, and what is the
% required angle of phase
nPeriods = 7; % let it take this many periods to phase
dlong = lambda; % (rad)
apogeeBurn = 1; % the burn is at the apogee of FB1 orbit

% Calculate the delta-vs required for phasing here
[delta_v1_M3, delta_v2_M3, delta_vtot_M3, M3_Tphase] = geoPhase(nPeriods, dlong, r_aFB1, r_pFB1, hFB1, apogeeBurn);
M3_elapsed_time = M3_Tphase*nPeriods;

%% FLYBY 1 is now IN PHASE, let it fly for 1 PERIOD and then execute MANOEUVRE 4

%% MANOEUVRE 4 -- PLANE CHANGE [FLYBY 1 --> FLYBY 2]
% This manoeuvre will take place at the apogee of the chaser orbit!!

% FLYBY 1 velocity
aFB1 = coeFB1(1);
eFB1 = coeFB1(2);
hFB1 = coeFB1(3);
r_aFB1 = aFB1*(1 + eFB1);

vFB1_apogee = hFB1/r_aFB1;

% FLYBY 2 velocity
aFB2 = coeFB2(1);
eFB2 = coeFB2(2);
hFB2 = coeFB2(3);
r_aFB2 = aFB2*(1 + eFB2);

vFB2_apogee = hFB2/r_aFB2; 

% Compute the delta-v required
delta = abs(coeFB1(4) - coeFB2(4));
deltaM4 = delta/deg;
delta_v_M4 = commonApsePlaneChange(vFB1_apogee, vFB2_apogee, delta);

%% MANOEUVRE 5 -- PLANE CHANGE [FLYBY 2 --> FLYBY 3]
% This manoeuvre will take place at the apogee of the FLYBY 2 orbit!!

% FLYBY 3 velocity
aFB3 = coeFB3(1);
eFB3 = coeFB3(2);
hFB3 = coeFB3(3);
r_aFB3 = aFB3*(1 + eFB3);

vFB3_apogee = hFB3/r_aFB3; 

% Compute the delta-v required
delta = abs(2*coeFB2(4)); % for this, the plane change angle is doubled
deltaM5 = delta/deg;
delta_v_M5 = commonApsePlaneChange(vFB2_apogee, vFB3_apogee, delta);

%% MANOEUVRE 6 -- PLANE CHANGE [FLYBY 3 --> FLYBY 1]
% This manoeuvre will take place at the apogee of the FLYBY 3 orbit!!
delta = abs(coeFB1(4) - coeFB2(4));
deltaM6 = delta/deg;
delta_v_M6 = commonApsePlaneChange(vFB3_apogee, vFB1_apogee, delta);

%% ADDITIONAL: MANOEUVRE 1: PHASE OF 180 (make -0.5) deg
nPeriods_M1 = 7;
r_a_initial = aA;
r_p_initial = aA;
apogeeBurn = 1;
dlong = -0.5*deg;
[delta_v1_M1, delta_v2_M1, delta_vtot_M1, Tphase] = geoPhase(nPeriods_M1, dlong, r_a_initial, r_p_initial, hA, apogeeBurn);

M1_time_elapsed = Tphase*nPeriods_M1/60/60/24; % time elapsed for phaser (days)

%% part (iv) -- MANOEUVRE 7 and 8: RENDEVOUS BURNS
nHours = 12; % amount of hours for transit
nFig = 9; % plot on this figure
delta_v_M7 = delta_V_rendevous(coeA, coeB1, nHours, nFig);

delta_v_M8 = delta_V_rendevous(coeB1, coeA, nHours, 10);

%% part (v) -- COMPILE and PRINT results
dVsum = 0; % set the delta-v running total to 0 (m/s)
tElapsed = 0; % set the elapsed time to 0 (hrs)

fprintf('\nMANOEUVRE TIMELINE\n\n');
fprintf('MANOEUVRE 1 IS A PHASE BACK TO THE OAP, START AT MANOEUVRE 2\n\n');
fprintf('MANOEUVRE 2: %s \n', 'HOHMANN ELLIPSE');
fprintf('BURN 2.1: delta-v = %f m/s, location: %s \n', delta_v_M2(1), 'orbit B1 perigee');
fprintf('BURN 2.2: delta-v = %f m/s, location: %s \n', delta_v_M2(2), 'orbit FB1 apogee');
fprintf('TIME TAKEN: %f hrs\n', 4.308203831624221e+04/60/60);
fprintf('\n');

% increment
tElapsed = tElapsed + 4.308203831624221e+04/60/60; 
dVsum = dVsum + abs(delta_v_M2(1)) + abs(delta_v_M2(1));
fprintf('RUNNING TOTAL DELTA-V: %f m/s \n', dVsum);
fprintf('RUNNING TOTAL ELAPSED TIME: %f hrs \n', tElapsed);
fprintf('\n');

fprintf('MANOEUVRE 3: %s \n', 'PHASER');
fprintf('BURN 3.1: delta-v = %f m/s, location: %s \n', delta_v1_M3, 'orbit FB1 apogee');
fprintf('BURN 3.2: delta-v = %f m/s, location: %s \n', delta_v2_M3, 'orbit FB1 apogee');
fprintf('TIME TAKEN: %f hrs\n', M3_elapsed_time/60/60);
fprintf('\n');

% increment
tElapsed = tElapsed + M3_elapsed_time/60/60; 
dVsum = dVsum + abs(delta_v1_M3) + abs(delta_v2_M3);
fprintf('RUNNING TOTAL DELTA-V: %f m/s \n', dVsum);
fprintf('RUNNING TOTAL ELAPSED TIME: %f hrs \n', tElapsed);
fprintf('\n');

fprintf('MANOEUVRE 4: %s \n', 'PLANE CHANGE');
fprintf('BURN 4.1: delta-v = %f m/s, @ %f deg to motion, location: %s \n', delta_v_M4, deltaM4, 'orbit FB1 apogee');
fprintf('TIME TAKEN: %f hrs\n', 24);
fprintf('\n');

% increment
tElapsed = tElapsed + 24;
dVsum = dVsum + abs(delta_v_M4);
fprintf('RUNNING TOTAL DELTA-V: %f m/s \n', dVsum);
fprintf('RUNNING TOTAL ELAPSED TIME: %f hrs \n', tElapsed);
fprintf('\n');

fprintf('MANOEUVRE 5: %s \n', 'PLANE CHANGE');
fprintf('BURN 5.1: delta-v = %f m/s, @ %f deg to motion, location: %s \n', delta_v_M5, deltaM5, 'orbit FB2 apogee');
fprintf('TIME TAKEN: %f hrs\n', 24);
fprintf('\n');

% increment
tElapsed = tElapsed + 24;
dVsum = dVsum + abs(delta_v_M5);
fprintf('RUNNING TOTAL DELTA-V: %f m/s \n', dVsum);
fprintf('RUNNING TOTAL ELAPSED TIME: %f hrs \n', tElapsed);
fprintf('\n');

fprintf('MANOEUVRE 6: %s \n', 'PLANE CHANGE');
fprintf('BURN 6.1: delta-v = %f m/s, @ %f deg to motion, location: %s \n', delta_v_M6, deltaM6, 'orbit FB3 apogee');
fprintf('TIME TAKEN: %f hrs\n', 24);
fprintf('\n');

% increment
tElapsed = tElapsed + 24;
dVsum = dVsum + abs(delta_v_M6);
fprintf('RUNNING TOTAL DELTA-V: %f m/s \n', dVsum);
fprintf('RUNNING TOTAL ELAPSED TIME: %f hrs \n', tElapsed);
fprintf('\n');

fprintf('MANOEUVRE 7: %s\n', 'RENDEVOUS to OAP');
fprintf('BURN 7.1: delta-v = %f m/s, %s m/s in X, %f m/s in Y location: %s \n', norm(delta_v_M7), delta_v_M7(1), delta_v_M7(2), 'orbit FB3 apogee');
fprintf('TIME TAKEN: %f hrs\n', nHours);

% docking time
fprintf('dock time: %f hrs\n\n', dockTime);

% increment
tElapsed = tElapsed + nHours + dockTime;
dVsum = dVsum + abs(norm(delta_v_M7));
fprintf('RUNNING TOTAL DELTA-V: %f m/s \n', dVsum);
fprintf('RUNNING TOTAL ELAPSED TIME: %f hrs \n', tElapsed);
fprintf('\n');

fprintf('MANOEUVRE 8: %s\n', 'RENDEVOUS to TARGET');
fprintf('BURN 8.1: delta-v = %f m/s, %s m/s in X, %f m/s in Y location: %s \n', norm(delta_v_M8), delta_v_M8(1), delta_v_M8(2), 'orbit B1 perigee');
fprintf('TIME TAKEN: %f hrs\n', nHours);

% docking time
fprintf('dock time: %f hrs\n\n', dockTime);

% increment
tElapsed = tElapsed + nHours + dockTime;
dVsum = dVsum + abs(norm(delta_v_M8));
fprintf('RUNNING TOTAL DELTA-V: %f m/s \n', dVsum);
fprintf('RUNNING TOTAL ELAPSED TIME: %f hrs \n', tElapsed);
fprintf('\n');

fprintf('NET TOTALS (EXCLUDING PHASER)\n');
fprintf('TOTAL DELTA-V = %f m/s\n', dVsum);
fprintf('TOTAL ELAPSED TIME = %f hrs\n\n', tElapsed);

% account for the additional phaser, MANOEUVRE 1
fprintf('MANOEUVRE 1: 0.5 DEG PHASER\n');
fprintf('BURN 1.1: delta-v = %f m/s, location: %s \n', delta_v1_M1, );
