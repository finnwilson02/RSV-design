% Fly-by sequence and burns calculator
clear;
clc;
clf;

%% Global parameters
R_e = 6.3781e+6; % Mean radius of Earth (m)
mu = 3.986004418e+14; % standard gravitational parameter for Earth (m^3/s^2) 
J2 = 0.00108263; % second zonal harmonics effect 
deg = pi/180; % converts degrees to radians
km = 1e-3; % converts metres to km
longSyd = 152; % longitude of sydney (deg)
omega_geo = 7.292123516990375e-05; % angular vel of geostationary orbit (m/s)

%% TARGET (spacecraft A), initially in geostationary orbit -lambda deg longitude from the target
coeA = [1.296404445843445e+11,0,0,0,2.652900463031381,0]; % COE vector for target orbit

%% RSV Orbit 1 (spacecraft B), initially out of phase by lambda degrees from TARGET

% RSV Orbit 1 - phased out of TARGET spacecraft
lambda = 0.5*deg; % out of phase factor (rad)

% Output (h e Omega i omega theta)
coeB1 = [1.296404445843445e+11,0,0,0,2.652900463031381,0]; % COE vector for RSV orbit 1
hB_1 = coeB1(1);
eB_1 = 0;

% Change the argument of perigee
omega1 = coeB1(5); % arg of perigee for orbit 1 (rad)

%% RSV orbit 2 - Hohmann transfer ellipse


%% RSV orbit 3 - FB1: co-planar relative motion
% Outputted from linEOM solver [a, e, h, i, theta, Omega, omega]
coeB3 = [4.216414009419459e+07,1.185827742554770e-05,1.296404445661142e+11,0,0,0,0];
coeB3 = [4.213928561795635e+07,0.023141007341066,1.295675233491746e+11,0,0,0,0]
% For convenience, set omega to longSyd
coeB3(end) = longSyd*deg; % set omega to longSyd (rad)
omega3 = coeB3(end); % arg of perigee for orbit 3 (rad)

% BURN 1.1 at orbit 2 perigee // BURN 2.2 at orbit 2 apogee
apogeeBurn = 0; % burn as at perigee
aB_1 = hB_1^2/(mu*(1 - eB_1^2));
aB_3 = coeB3(1); 
eB_3 = coeB3(2);
[DVB_1_to_3, hohmann_B2] = coplanarHohmann(aB_1, eB_1, aB_3, eB_3, omega1, omega3, apogeeBurn);

% Compute apogee and perigee radii
r_aB3 = aB_3*(1 + eB_3);
r_pB3 = aB_3*(1 - eB_3);
hB_3 = coeB3(3); % angular momentum (m^2/s)
%% RSV orbit 2 - Hohmann transfer ellipse
hB_2 = hohmann_B2(1); % hohmann transfer angular momentum (m^2/s)
eB_2 = hohmann_B2(2); % hohmann transfer eccentricity\

% Extract the period, and hence transit time, and use this information to
% extract the amount of phasing required for orbit 3 so that thetaA =
% thetaB and the fly by can be executed.
aB_2 = hB_2^2/(mu*(1 - eB_2^2)); % semi-major axis (m)
TB_2 = sqrt(aB_2^3*4*pi^2/mu); % hohmann period (s)

delta_t = TB_2/2; % time of flight (s)

% Orbit 1 moves in a circle, so 
delta_theta_1 = delta_t*omega_geo; % change in true anomaly of orbit 1

thetaA_initial = lambda; % initial theta of target (rad)
thetaB_initial = 0; % initial theta of RSV (rad)

thetaB_final = thetaB_initial + pi; % final true anomaly of RSV (rad)
thetaA_final = lambda + pi; % final true anomaly of target (rad)

%% RSV Orbit 4 - Phaser to relative motion 
nPeriods = 1;
dlong = lambda; % change in longitude (rad)

TB_4 = (nPeriods*2*pi + dlong)/(nPeriods*omega_geo); % period of phaser (s)
aB_4 = ((mu*TB_4^2)/(4*pi^2))^(1/3); % semi-major axis (m)

r_pB4 = r_aB3; % the perigee of the phaser is the apogee of orbit 3 (m)
r_aB4 = 2*aB_4 - r_pB4; % apogee of transfer orbit (m)
eB_4 = (r_aB4 - r_pB4)/(r_aB4 + r_pB4); % eccentricity of phaser 

hB_4 = sqrt(mu*aB_4*(1 - eB_4^2)); % angular momentum of phaser (m^2/s)

% Now calculate the velocities required to compute the delta-v
vB_3_apogee = hB_3/r_aB3; % the initial orbit, orbit 3's, velocity at apogee (m/s)
v_B_phase = hB_4/r_pB4; % velocity required for phaser (m/s)

% Calculate the delta-v's, and the net delta-v for phasing
delta_v_phase_1 = v_B_phase - vB_3_apogee; % delta-v for first burn (m/s)
delta_v_phase_2 = -(v_B_phase - vB_3_apogee); % delta-v for first burn (m/s)

delta_v_phase_total = abs(delta_v_phase_1) + abs(delta_v_phase_2); % net delta-v for phaser

%% Plot the initial orbits
[RA_0, VA_0] = coe2stateVecs(coeA);
[RB1_0, VB1_0] = coe2stateVecs(coeB1);

day = 24*60*60; % (s)
tspan = [0, day]; % (s)
options = odeset('RelTol', 1e-10, 'AbsTol', 1e-10);
fA_0 = [RA_0, VA_0];
fB1_0 = [RB1_0, VB1_0];
[~, fA] = ode45(@(t, f)twoBody(t, f), tspan, fA_0, options);
[~, fB1] = ode45(@(t, f)twoBody(t, f), tspan, fB1_0, options);

figure(1)
earth_sphere('km');
hold on
plot3(fA(:, 1)*km, fA(:, 2)*km, fA(:, 3)*km, 'r');
hold on
plot3(fB1(:, 1)*km, fB1(:, 2)*km, fB1(:, 3)*km, 'b');

